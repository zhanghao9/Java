RabbitMq的协议
1.AMQP协议
2.MQTT协议

1.2 AMQP是由各种数据帧组成的协议，包括方法帧、内容帧，心跳帧等，每一帧数据所有的帧都由一个头(header,7个字节),任意大小的负载(payload),
和一个检测错误的帧结束（frame-end）字节组成:
要读取一个帧，我们必须:
（1）读取header,检查帧类型(frame type)和通道(channel)。
（2） 根据帧类型，我们读取负载并进行处理。
（3）读取帧结束字节。
在实际实现中，如果性能很关键的话，我们应该使用读前缓冲（read-ahead buffering）”或“收集读取（gathering reads）”，
以避免为了读一个帧而做三次独立的系统调用。
AMQP是一套标准的底层协议，加入了许多其他特征来支持互用性，具有跨语言和跨平台的特性。AMQP协议的主要特性如下：
•独立于平台的底层消息传递协议
•消费者驱动消息传递
•跨语言和平台的互用性
•它是底层协议的
•有5种交换类型direct，fanout，topic，headers，system
•面向缓存的
•可实现高性能
•支持长周期消息传递
•支持经典的消息队列，循环，存储和转发
•支持事务（跨消息队列）
•支持分布式事务（XA，X/OPEN，MS DTC）
•使用SASL和TLS确保安全性
•支持代理安全服务器
•元数据可以控制消息流
•不支持LVQ
•客户端和服务端对等
•可扩展

1.3
MQTT协议是它是专门为小设备设计的。计算性能不高的设备不能适应AMQP上的复杂操作，
它们需要一种简单而且可互用的方式进行通信。这是MQTT的基本要求，而如今，MQTT是物联网（IOT）生态系统中主要成分之一。
MQTT的主要特性：
 •面向流，内存占用低
•为小型无声设备之间通过低带宽发送短消息而设计
•不支持长周期存储和转发
•不允许分段消息（很难发送长消息）
•支持主题发布-订阅
•消息实际上是短暂的（短周期）
•简单用户名和密码，基于没有足够信息熵的安全
•不支持安全连接
•消息不透明
•Topic是全局的（一个全局的命名空间）
•支持最新值队列（Last Value Queue (LVQ) ）
•客户端和服务端不对称
•不能扩展


3.rabbitMq有消息确认机制保证消息不丢失
生产者发送消息到服务器，服务器返回现在确认，消费者订阅消息，接收到消息后会返回服务器。两种确认保证消息可以接收OK
还可以通过a.消息持久化，b.集群，c.消息补偿机制（消息保证到数据库）
